#include <iostream> // Подключение библиотеки для работы с вводом и выводом (cout, cin, endl).
#include <malloc.h> // Подключение библиотеки для работы с функциями выделения памяти (calloc, free).

using namespace std; // Использование пространства имён std для упрощения доступа к стандартным функциям.


// Функция для вывода матрицы.
void printMatrix(int** matrix, int rows, int cols) {
    // Цикл по строкам матрицы.
    for (int i = 0; i < rows; i++) {
        // Цикл по столбцам матрицы.
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << "\t"; // Вывод элемента матрицы с табуляцией для форматирования.
        }
        cout << endl; // Переход на следующую строку после вывода всех элементов строки.
    }
}

// Функция обработки матрицы.
void processMatrix(int** matrix, int rows, int cols) {
    // Инициализация переменных для хранения максимального и минимального элементов матрицы.
    int maxElement = matrix[0][0];
    int minElement = matrix[0][0];

    // Переменные для хранения позиций максимального и минимального элементов.
    int maxRow = 0, maxCol = 0;
    int minRow = 0, minCol = 0;

    // Переменные для подсчёта количества положительных, отрицательных и нулевых элементов.
    int posCount = 0, negCount = 0, zeroCount = 0;

    // Проход по каждому элементу матрицы.
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            int value = matrix[i][j]; // Текущий элемент матрицы.

            // Подсчёт положительных, отрицательных и нулевых элементов.
            if (value > 0) posCount++; // Увеличиваем счётчик положительных элементов.
            else if (value < 0) negCount++; // Увеличиваем счётчик отрицательных элементов.
            else zeroCount++; // Увеличиваем счётчик нулевых элементов.

            // Проверка, является ли текущий элемент максимальным.
            if (value > maxElement) {
                maxElement = value; // Обновляем значение максимального элемента.
                maxRow = i; // Сохраняем строку максимального элемента.
                maxCol = j; // Сохраняем столбец максимального элемента.
            }

            // Проверка, является ли текущий элемент минимальным.
            if (value < minElement) {
                minElement = value; // Обновляем значение минимального элемента.
                minRow = i; // Сохраняем строку минимального элемента.
                minCol = j; // Сохраняем столбец минимального элемента.
            }
        }
    }

    // Обмен значениями максимального элемента и первого элемента матрицы.
    int temp = matrix[0][0];
    matrix[0][0] = matrix[maxRow][maxCol];
    matrix[maxRow][maxCol] = temp;

    // Обмен значениями минимального элемента и последнего элемента матрицы.
    temp = matrix[rows - 1][cols - 1];
    matrix[rows - 1][cols - 1] = matrix[minRow][minCol];
    matrix[minRow][minCol] = temp;

    // Вывод обработанной матрицы.
    cout << "Обработанная матрица:\n";
    printMatrix(matrix, rows, cols);

    // Вывод количества положительных, отрицательных и нулевых элементов.
    cout << "Количество положительных элементов: " << posCount << endl;
    cout << "Количество отрицательных элементов: " << negCount << endl;
    cout << "Количество нулевых элементов: " << zeroCount << endl;
}

int main() {
    setlocale(LC_ALL, "Russian"); // Установка локализации для работы с русским языком в консоли.
    int rows, cols; // Переменные для количества строк и столбцов матрицы.

    // Ввод количества строк и столбцов матрицы.
    cout << "Введите количество строк и столбцов матрицы: ";
    cin >> rows >> cols;

    // Выделение памяти для матрицы (массив указателей на строки).
    int** matrix = (int**)calloc(rows, sizeof(int*));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int*)calloc(cols, sizeof(int)); // Выделение памяти для каждой строки.
    }

    // Ввод элементов матрицы.
    cout << "Введите элементы матрицы:\n";
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j]; // Ввод каждого элемента матрицы.
        }
    }

    // Вывод исходной матрицы.
    cout << "Исходная матрица:\n";
    printMatrix(matrix, rows, cols);

    // Обработка матрицы.
    processMatrix(matrix, rows, cols);

    // Освобождение памяти, выделенной для матрицы.
    for (int i = 0; i < rows; i++) {
        free(matrix[i]); // Освобождение памяти для каждой строки.
    }
    free(matrix); // Освобождение памяти для массива указателей.

    return 0; // Успешное завершение программы.
}
