#include <iostream>  // Подключаем библиотеку для работы с вводом-выводом
#include <math.h>    // Подключаем библиотеку математических функций (sqrt, abs, log)
using namespace std; // Используем пространство имен std для упрощения синтаксиса (например, cout вместо std::cout)

int main() {
    // Инициализация констант и переменных:
    double a = 2.17;     // Константа a, используемая в вычислениях
    double xn = -1.5;    // Начальное значение x
    double xk = 1.5;     // Конечное значение x
    double dx = 0.2;     // Шаг изменения x
    double x = xn;       // Текущая переменная x, инициализируем с начального значения
    double y;            // Переменная для хранения результата вычислений y
    double sum = 0;      // Переменная для накопления суммы положительных y
    double product = 1;  // Переменная для накопления произведения положительных y
    int count = 0;       // Счетчик итераций цикла
    int positiveCount = 0; // Счетчик положительных значений y

    // Заголовок таблицы, поясняющий, какие данные будут выводиться
    cout << "x\t\ty\n";

    // Цикл while для перебора значений x от xn до xk включительно
    while (x <= xk) {
        // Вычисление y по заданной формуле
        y = sqrt(abs((a + x * x) * log(a * a + 3 * 4))) / 2;

        // Проверяем, является ли текущая итерация четной
        if (count % 2 == 0) {
            // Выводим значения x и y в таблицу на каждой четной итерации
            cout << x << "\t\t" << y << endl;
        }

        // Если значение y положительное, выполняем дополнительные действия
        if (y > 0) {
            positiveCount++; // Увеличиваем счетчик положительных значений
            sum += y;        // Добавляем y к общей сумме
            product *= y;    // Умножаем y на общее произведение
        }

        count++;   // Увеличиваем счетчик итераций
        x += dx;   // Переходим к следующему значению x, увеличивая его на шаг dx
    }

    // Вывод итоговых значений после завершения цикла
    cout << "Sum: " << sum              // Сумма всех положительных значений y
        << "\nProduct: " << product    // Произведение всех положительных значений y
        << "\nPositive Count: " << positiveCount << endl; // Количество положительных значений y

    return 0; // Завершаем выполнение программы, возвращая код успеха
}
